//
//  CloudkitCodableError.swift
//  Hercules-iOS
//
//  Created by Guilherme Girotto on 14/11/18.
//  Copyright Â© 2018 Hercules. All rights reserved.
//

import Foundation

public struct CloudkitCodableError: Error {
    
    enum ErrorType: String {
        
        /// An error generated by Cloudkit
        case cloudkitError
        /// An inconsistency occurred at Cloudkit. It normally occurs when a request doesn't returns neither an error nor a value
        case cloudkitInconsistence
        /// CKRecord not found
        case recordNotFound
        /// Tryied to encode/decode a value that is not Codable.
        case typeMismatch
        
        
        var identifier: String {
            return rawValue
        }
        
        var description: String {
            switch self {
            case .cloudkitError:
                return "Cloudkit returned with an error. See context for more information."
            case .cloudkitInconsistence:
                return "An inconsistency occurred at Cloudkit. It normally occurs when a request doesn't returns neither an error nor a value."
            case .recordNotFound:
                return "Tryied to decode a CKRecord that doesn't exists. Possibly occured because this CKRecord is not linked with the main object CKRecord in Cloudkit"
            case .typeMismatch:
                return "Tryied to encode/decode a value that doesnt conform to Codable protocol. See context for more information"
            }
        }
    }
    
    var errorType: ErrorType
    var context: [String: Any]?
    var description: String {
        return errorType.description
    }
    
    init(_ errorType: ErrorType, context: [String: Any] = [:]) {
        self.errorType = errorType
        self.context = nil
    }
}

extension CloudkitCodableError: Equatable {
    public static func == (lhs: CloudkitCodableError, rhs: CloudkitCodableError) -> Bool {
        return lhs.errorType.identifier == rhs.errorType.identifier
    }
}

extension CloudkitCodableError {
    static func error(fromCloudkitError error: Error) -> CloudkitCodableError? {
        return CloudkitCodableError(.cloudkitError, context: ["Error:": error])
    }
}
